// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Provider {
  kakao
}

model SocialAccount {
  id       Int      @id @default(autoincrement())
  provider Provider
  socialId String
  email    String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  @@unique([provider, socialId])
}

model User {
  id    Int     @id @default(autoincrement())
  email String? @unique

  SocialAccount SocialAccount?
  Token         Token[]

  profile        Profile?
  todayQuest     TodayQuest?
  writtenQuests  Quest[]
  finishedQuests FinishedQuestItem[]

  createdAt DateTime @default(now())
}

model AuthCode {
  id    Int    @id @default(autoincrement())
  email String @unique
  code  Int

  createdAt DateTime @default(now())
}

model Profile {
  id       Int    @id @default(autoincrement())
  nickname String @default("오하루")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Token {
  id              Int     @id @default(autoincrement())
  rotationCounter Int     @default(0)
  blocked         Boolean @default(false)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Quest {
  id    Int    @id @default(autoincrement())
  title String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  QuestItem         QuestItem[]
  FinishedQuestItem FinishedQuestItem[]

  createdAt DateTime @default(now())

  @@index(createdAt)
  @@index(title)
  @@index(userId)
}

enum QuestStatus {
  doing
  done
}

model TodayQuest {
  id     Int         @id @default(autoincrement())
  status QuestStatus @default(doing)
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int         @unique
  quests QuestItem[]

  createdAt DateTime @default(now())
}

model QuestItem {
  id      Int         @id @default(autoincrement())
  userId  Int
  quest   Quest       @relation(fields: [questId], references: [id], onDelete: Cascade)
  questId Int
  status  QuestStatus @default(doing)

  TodayQuest   TodayQuest? @relation(fields: [todayQuestId], references: [id], onDelete: Cascade)
  todayQuestId Int

  createdAt DateTime @default(now())
}

model FinishedQuestItem {
  id            Int   @id @default(autoincrement())
  quest         Quest @relation(fields: [questId], references: [id], onDelete: Cascade)
  user          User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  finishedCount Int   @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questId Int
  userId  Int

  @@unique([questId, userId])
  @@index(userId)
  @@index(updatedAt)
}
